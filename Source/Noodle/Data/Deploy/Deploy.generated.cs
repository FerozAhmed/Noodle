using Noodle.Data.Deploy.Models;
using Noodle.Serialization;
using Noodle.Web;
using System.Collections.Generic;
using System.Linq;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Noodle.Data.Deploy
{
    #line 3 "..\..\Data\Deploy\Deploy.cshtml"
#line default
    #line hidden
    
    #line 4 "..\..\Data\Deploy\Deploy.cshtml"
#line default
    #line hidden
#line 5 "..\..\Data\Deploy\Deploy.cshtml"
#line default
    #line hidden
    
    #line 6 "..\..\Data\Deploy\Deploy.cshtml"

#line default
    #line hidden
    
    #line 7 "..\..\Data\Deploy\Deploy.cshtml"

#line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "1.4.1.0")]
    internal partial class Deploy : RazorPageBase
    {
#line hidden

        #line 10 "..\..\Data\Deploy\Deploy.cshtml"

    public List<EmbeddedSchemaProviderAttribute> EmbeddedSchemaPoviders { get; set; }
    public IEmbeddedSchemaPlanner Planner { get; set; }
    public bool IsSqlPackage(EmbeddedSchemaProviderAttribute attribute)
    {
        return typeof(SqlPackageEmbeddedSchemaProvider).IsAssignableFrom(attribute.Decorates);
    }
    public string SchemaTojson(EmbeddedSchemaProviderAttribute schema, bool renderPlan = true)
    {
        var plans = Planner.GetPlansFor(schema);
        var hasAllSqlPackage = plans.All(IsSqlPackage);

        var model = new SchemaModel(schema);
        model.hasAllSqlPackages = hasAllSqlPackage;
        if (renderPlan)
        {
            model.plans.AddRange(plans.Select(x => new SchemaModel(x)
            {
                hasAllSqlPackages = Planner.GetPlansFor(x).All(IsSqlPackage)
            }));
        }
        else
        {
            model.plans = null;
        }

        var result = new JavaScriptSerializer().Serialize(model);
        return result;
    }

        #line default
        #line hidden

        public override void Execute()
        {


WriteLiteral("\r\n\r\n");








WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <title>MethodFactory Data Deploy" +
"</title>\r\n    <link rel=\"stylesheet\" href=\"/method/embedded/bootstrapcss\" />\r\n  " +
"  <style type=\"text/css\">\r\n        code.deploy-output, pre.deploy-script {\r\n    " +
"        color:#333;\r\n            display:block;\r\n        }\r\n        pre.deploy-s" +
"cript\r\n        {\r\n            height:500px;\r\n            overflow-y:auto;\r\n     " +
"   }\r\n    </style>\r\n    <script type=\"text/javascript\" src=\"/method/embedded/jqu" +
"ery\"></script>\r\n    <script type=\"text/javascript\" src=\"/method/embedded/bootstr" +
"apjs\"></script>\r\n    <script type=\"text/javascript\" src=\"/method/embedded/knocko" +
"ut\"></script>\r\n    <script type=\"text/javascript\" src=\"/method/embedded/knockout" +
"mapping\"></script>\r\n    <script type=\"text/javascript\">\r\n\r\n        $(function ()" +
" {\r\n            // setup the tabs\r\n            $(\'#schema-tabs a\').first().tab(\'" +
"show\');\r\n        });\r\n\r\n        function schemaModel(schema) {\r\n            var " +
"model = this;\r\n            model.errorMessages = ko.observableArray([]);\r\n      " +
"      model.successMessages = ko.observableArray([]);\r\n            model.name = " +
"schema.name;\r\n            model.displayName = schema.displayName;\r\n            m" +
"odel.hasAllSqlPackages = schema.hasAllSqlPackages;\r\n            model.plans = ko" +
".observableArray([]);\r\n            model.isWorking = ko.observable(false);\r\n\r\n  " +
"          model.hasErrorMessages = ko.computed(function () {\r\n                re" +
"turn this.errorMessages().length > 0;\r\n            }, model);\r\n\r\n            mod" +
"el.hasSuccessMessages = ko.computed(function () {\r\n                return this.s" +
"uccessMessages().length > 0;\r\n            }, model);\r\n\r\n            model.clearS" +
"tate = function () {\r\n                model.errorMessages([]);\r\n                " +
"model.successMessages([]);\r\n                $.each(model.plans(), function (inde" +
"x, plan) {\r\n                    plan.deployReport(null);\r\n                    pl" +
"an.deployOutput(null);\r\n                    plan.deployScript(null);\r\n          " +
"          plan.deployScriptDownloadKey(null);\r\n                });\r\n            " +
"};\r\n\r\n            if (schema.plans && schema.plans.length > 0) {\r\n              " +
"  model.plans($.map(schema.plans, function (item) {\r\n                    var p =" +
" new plan(item);\r\n                    p.parentName = model.name;\r\n              " +
"      return p;\r\n                }));\r\n            }\r\n\r\n            model.perfor" +
"mDeploy = function () {\r\n                model.isWorking(true);\r\n               " +
" model.clearState();\r\n                var data = {\r\n                    schemaNa" +
"me: model.name,\r\n                    connectionString: ko.mapping.toJS(m.connect" +
"ionString)\r\n                };\r\n                $.ajax({\r\n                    ty" +
"pe: \"POST\",\r\n                    url: \"/method/datadeploy/deploy\",\r\n            " +
"        data: data,\r\n                    success: function (result) {\r\n         " +
"               handleDeployResponse(result, model);\r\n                    }\r\n    " +
"            });\r\n            };\r\n            model.buildDelpoyReport = function " +
"() {\r\n                model.isWorking(true);\r\n                model.clearState()" +
";\r\n                var data = {\r\n                    schemaName: model.name,\r\n  " +
"                  connectionString: ko.mapping.toJS(m.connectionString)\r\n       " +
"         };\r\n                $.ajax({\r\n                    type: \"POST\",\r\n      " +
"              url: \"/method/datadeploy/deployReport\",\r\n                    data:" +
" data,\r\n                    success: function (result) {\r\n                      " +
"  handleDeployReportResponse(result, model);\r\n                    }\r\n           " +
"     });\r\n            };\r\n            model.generateScript = function () {\r\n    " +
"            model.isWorking(true);\r\n                model.clearState();\r\n       " +
"         var data = {\r\n                    schemaName: model.name,\r\n            " +
"        connectionString: ko.mapping.toJS(m.connectionString)\r\n                }" +
";\r\n                $.ajax({\r\n                    type: \"POST\",\r\n                " +
"    url: \"/method/datadeploy/deployScript\",\r\n                    data: data,\r\n  " +
"                  success: function (result) {\r\n                        handleDe" +
"ployScriptResponse(result, model);\r\n                    }\r\n                });\r\n" +
"            };\r\n\r\n        }\r\n\r\n        function plan(schema) {\r\n            var " +
"model = this;\r\n            model.name = schema.name;\r\n            model.displayN" +
"ame = schema.displayName;\r\n            model.deployReport = ko.observable(null);" +
"\r\n            model.deployScript = ko.observable(null);\r\n            model.deplo" +
"yOutput = ko.observableArray([]);\r\n            model.deployScriptDownloadKey = k" +
"o.observable(null);\r\n            model.hasDeployReport = ko.computed(function ()" +
" {\r\n                if (this.deployReport()) {\r\n                    return true;" +
"\r\n                } else {\r\n                    return false;\r\n                }" +
"\r\n            }, model);\r\n            model.hasDeployOutput = ko.computed(functi" +
"on () {\r\n                var o = this.deployOutput();\r\n                if (o) {\r" +
"\n                    if (o.length > 0) {\r\n                        return true;\r\n" +
"                    }\r\n                }\r\n                return false;\r\n       " +
"     }, model);\r\n            model.hasDeployScript = ko.computed(function () {\r\n" +
"                var o = this.deployScript();\r\n                if (o) {\r\n        " +
"            if (o.length > 0) {\r\n                        return true;\r\n         " +
"           }\r\n                }\r\n                return false;\r\n            }, m" +
"odel);\r\n        }\r\n\r\n        function connectionStringModel() {\r\n            thi" +
"s.server = ko.observable(\'localhost\\\\sqlexpress\');\r\n            this.database = " +
"ko.observable(\'Method\');\r\n            this.useIntegratedSecurity = ko.observable" +
"(true);\r\n            this.userName = ko.observable(\'\');\r\n            this.passwo" +
"rd = ko.observable(\'\');\r\n        }\r\n\r\n        function viewModel() {\r\n          " +
"  var model = this;\r\n            model.schemas = ko.observableArray([]);\r\n");


            
            #line 201 "..\..\Data\Deploy\Deploy.cshtml"
             foreach (var schema in EmbeddedSchemaPoviders)
            {

            
            #line default
            #line hidden
WriteLiteral("                ");

WriteLiteral("\r\n            model.schemas.push(new schemaModel(");


            
            #line 204 "..\..\Data\Deploy\Deploy.cshtml"
                                           Write(Html(SchemaTojson(schema)));

            
            #line default
            #line hidden
WriteLiteral(")); \r\n                ");

WriteLiteral("   \r\n");


            
            #line 206 "..\..\Data\Deploy\Deploy.cshtml"
            }

            
            #line default
            #line hidden
WriteLiteral("            model.connectionString = new connectionStringModel();\r\n        }\r\n\r\n " +
"       function handleCommonResult(result, schema) {\r\n            schema.isWorki" +
"ng(false);\r\n            schema.errorMessages(result.errors);\r\n            if (re" +
"sult.successful) {\r\n                schema.successMessages([result.successMessag" +
"e]);\r\n            } else {\r\n                schema.successMessages([]);\r\n       " +
"     }\r\n        }\r\n\r\n        function handleDeployResponse(result, schema) {\r\n  " +
"          handleCommonResult(result, schema);\r\n            var $schema = $(\"div[" +
"data-schema=\'\" + schema.name + \"\']\");\r\n\r\n            $.each(result.Output, funct" +
"ion (planName, output) {\r\n                var planModel = ko.dataFor($(\"div[data" +
"-plan=\'\" + planName + \"\'] div\", $schema)[0]);\r\n                planModel.deployO" +
"utput(output);\r\n            });\r\n\r\n            $(\".accordion-body\", $schema).css" +
"({ height: \'auto\' });\r\n            $(\".collapse\", $schema).collapse(\"show\");\r\n  " +
"      }\r\n\r\n        function handleDeployScriptResponse(result, schema) {\r\n      " +
"      handleCommonResult(result, schema);\r\n            var $schema = $(\"div[data" +
"-schema=\'\" + schema.name + \"\']\");\r\n\r\n            $.each(result.Scripts, function" +
" (planName, script) {\r\n                var planModel = ko.dataFor($(\"div[data-pl" +
"an=\'\" + planName + \"\'] div\", $schema)[0]);\r\n                planModel.deployScri" +
"pt(script.Script);\r\n                planModel.deployScriptDownloadKey(script.Key" +
");\r\n            });\r\n\r\n            $(\".accordion-body\", $schema).css({ height: \'" +
"auto\' });\r\n            $(\".collapse\", $schema).collapse(\"show\");\r\n        }\r\n\r\n " +
"       function handleDeployReportResponse(result, schema) {\r\n            handle" +
"CommonResult(result, schema);\r\n            var $schema = $(\"div[data-schema=\'\" +" +
" schema.name + \"\']\");\r\n\r\n            $.each(result.DeploymentReports, function (" +
"planName, planReport) {\r\n                var planModel = ko.dataFor($(\"div[data-" +
"plan=\'\" + planName + \"\'] div\", $schema)[0]);\r\n                planModel.deployRe" +
"port(planReport);\r\n            });\r\n\r\n            $(\".accordion-body\", $schema)." +
"css({ height: \'auto\' });\r\n            $(\".collapse\", $schema).collapse(\"show\");\r" +
"\n        }\r\n\r\n    </script>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n     " +
"   <div class=\"row\">\r\n            <div class=\"span12\">\r\n                <div cla" +
"ss=\"page-header\">\r\n                    <h1>Data Deploy</h1>\r\n                </d" +
"iv>\r\n                <div class=\"form-horizontal\">\r\n                    <div cla" +
"ss=\"control-group\">\r\n                        <label for=\"server\" class=\"control-" +
"label\">Server</label>\r\n                        <div class=\"controls\">\r\n         " +
"                   <input data-bind=\"value: connectionString.server\" type=\"text\"" +
" name=\"server\" />\r\n                        </div>\r\n                    </div>\r\n " +
"                   <div class=\"control-group\">\r\n                        <label f" +
"or=\"database\" class=\"control-label\">Database</label>\r\n                        <d" +
"iv class=\"controls\">\r\n                            <input data-bind=\"value: conne" +
"ctionString.database\" type=\"text\" name=\"database\" />\r\n                        </" +
"div>\r\n                    </div>\r\n                    <div class=\"control-group\"" +
">\r\n                        <label for=\"useIntegratedSecurity\" class=\"control-lab" +
"el\">Integrated Security</label>\r\n                        <div class=\"controls\">\r" +
"\n                            <input data-bind=\"checked: connectionString.useInte" +
"gratedSecurity\" type=\"checkbox\" name=\"useIntegratedSecurity\" />\r\n               " +
"         </div>\r\n                    </div>\r\n                    <div data-bind=" +
"\"visible: connectionString.useIntegratedSecurity() == false\">\r\n                 " +
"       <div class=\"control-group\">\r\n                            <label for=\"user" +
"Name\" class=\"control-label\">Username</label>\r\n                            <div c" +
"lass=\"controls\">\r\n                                <input data-bind=\"value: conne" +
"ctionString.userName\" type=\"text\" name=\"userName\" />\r\n                          " +
"  </div>\r\n                        </div>\r\n                        <div class=\"co" +
"ntrol-group\">\r\n                            <label for=\"password\" class=\"control-" +
"label\">Password</label>\r\n                            <div class=\"controls\">\r\n   " +
"                             <input data-bind=\"value: connectionString.password\"" +
" type=\"text\" name=\"password\" />\r\n                            </div>\r\n           " +
"             </div>\r\n                    </div>\r\n                </div>\r\n       " +
"         <div class=\"tabbable\">\r\n                    <ul data-bind=\"foreach: sch" +
"emas\" id=\"schema-tabs\" class=\"nav nav-tabs\">\r\n                        <li>\r\n    " +
"                        <a data-bind=\"attr: { href: \'#\' + name + \'-tab\' }, text:" +
" displayName\" data-toggle=\"tab\"></a>\r\n                        </li>\r\n           " +
"         </ul>\r\n                    <div data-bind=\"foreach: schemas\" class=\"tab" +
"-content\">\r\n                        <div data-bind=\"attr: { id: name + \'-tab\', \'" +
"data-schema\': name }\" class=\"tab-pane\">\r\n\r\n\r\n                            <ul dat" +
"a-bind=\"visible: hasErrorMessages, foreach: errorMessages\" class=\"alert alert-er" +
"ror unstyled\">\r\n                                <li><span data-bind=\"text: $data" +
"\"></span></li>\r\n                            </ul>\r\n\r\n                           " +
" <ul data-bind=\"visible: hasSuccessMessages, foreach: successMessages\" class=\"al" +
"ert alert-success unstyled\">\r\n                                <li><span data-bin" +
"d=\"text: $data\"></span></li>\r\n                            </ul>\r\n\r\n             " +
"               <div data-bind=\"visible: !hasAllSqlPackages\" class=\"alert alert-e" +
"rror\">\r\n                                One or more emebedded shemas below are n" +
"ot usinkl \"SqlPackage.exe\" which is required to perform deployments.\r\n          " +
"                  </div>\r\n                            <p>\r\n                     " +
"           <div class=\"btn-group\">\r\n                                    <button " +
"data-bind=\"disable: !hasAllSqlPackages || isWorking, click: performDeploy\" type=" +
"\"button\" class=\"btn\">Deploy</button>\r\n                                    <butto" +
"n data-bind=\"disable: !hasAllSqlPackages || isWorking, click: generateScript\" ty" +
"pe=\"button\" class=\"btn\">Generate</button>\r\n                                    <" +
"button data-bind=\"disable: !hasAllSqlPackages || isWorking, click: buildDelpoyRe" +
"port\" type=\"button\" class=\"btn\">Report</button>\r\n                               " +
" </div>\r\n                            </p>\r\n                            <div data" +
"-bind=\"attr : {id: name + \'-accordian\' }, foreach: plans\" class=\"accordion\">\r\n  " +
"                              <div data-bind=\"attr: { \'data-plan\': name }\" class" +
"=\"accordion-group\">\r\n                                    <div class=\"accordion-h" +
"eading\">\r\n                                        <a data-bind=\"text: displayNam" +
"e, attr: { \'data-parent\': parentName + \'-accodian\', href: \'#\' + parentName + nam" +
"e + \'-content\' }\" class=\"accordion-toggle collapsed\" data-toggle=\"collapse\"></a>" +
"\r\n                                    </div>\r\n                                  " +
"  <div data-bind=\"attr: { id: parentName + name + \'-content\' }\" class=\"accordion" +
"-body collapse\" style=\"height: 0px;\">\r\n                                        <" +
"div data-bind=\"visible:(hasDeployReport() || hasDeployOutput() || hasDeployScrip" +
"t())\" class=\"accordion-inner\">\r\n                                            <div" +
" data-bind=\"if:hasDeployReport\">\r\n                                              " +
"  <div data-bind=\"template: { name: \'deploy-report-template\', data: deployReport" +
" }\"></div>\r\n                                            </div>\r\n                " +
"                            <div data-bind=\"if:hasDeployOutput\">\r\n              " +
"                                  <div data-bind=\"template: { name: \'deploy-outp" +
"ut-template\', data: deployOutput }\"></div>\r\n                                    " +
"        </div>\r\n                                            <div data-bind=\"if:h" +
"asDeployScript\">\r\n                                                <div data-bind" +
"=\"template: { name: \'deploy-script-template\', data: deployScript }\"></div>\r\n    " +
"                                        </div>\r\n                                " +
"        </div>\r\n                                    </div>\r\n                    " +
"            </div>\r\n                            </div>\r\n                        " +
"</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n" +
"        </div>\r\n    </div>\r\n\r\n    <script type=\"text/html\" id=\"deploy-script-tem" +
"plate\">\r\n        <a data-bind=\"if: ($parent.deployScriptDownloadKey()), attr: {h" +
"ref: ( \'/method/datadeploy/deployscriptdownload/\' + $parent.deployScriptDownload" +
"Key())}\" class=\"btn\" target=\"_blank\">Download script</a>\r\n        <pre data-bind" +
"=\"text: $data\" class=\"deploy-script\">\r\n\r\n        </pre>\r\n    </script>\r\n\r\n    <s" +
"cript type=\"text/html\" id=\"deploy-output-template\">\r\n        <code data-bind=\"fo" +
"reach: $data\" class=\"deploy-output\">\r\n            <span data-bind=\"text: $data\">" +
"</span>\r\n            <br />\r\n        </code>\r\n    </script>\r\n\r\n    <script type=" +
"\"text/html\" id=\"deploy-report-template\">\r\n\r\n        <div data-bind=\"if: (HasInfo" +
"mation == false)\">\r\n            <p class=\"alert alert-success\">There are no sche" +
"ma/object changes.</p>\r\n            <i>There may be pre/post deploy scripts.</i>" +
"\r\n        </div>\r\n\r\n        <ul data-bind=\"visible: HasErrors, foreach: Errors\" " +
"class=\"alert alert-error unstyled\">\r\n            <li><span data-bind=\"text: Issu" +
"e\"></span>: <span data-bind=\"text: Name\"></span></li>\r\n        </ul>\r\n\r\n        " +
"<ul data-bind=\"visible: HasWarnings, foreach: Warnings\" class=\"alert alert-info " +
"unstyled\">\r\n            <li><span data-bind=\"text: Issue\"></span>: <span data-bi" +
"nd=\"text: Name\"></span></li>\r\n        </ul>\r\n\r\n        <ul data-bind=\"visible: H" +
"asAlerts, foreach: Alerts\" class=\"alert unstyled\">\r\n            <li><strong data" +
"-bind=\"text: Name\"></strong>:\r\n                <div data-bind=\"foreach: Issue\">\r" +
"\n                    <span data-bind=\"text: Value\"></span>\r\n                </di" +
"v>\r\n            </li>\r\n        </ul>\r\n\r\n        <div data-bind=\"foreach: Operati" +
"ons\">\r\n            <legend data-bind=\"text: Name\"></legend>\r\n            <table " +
"class=\"table table-striped\">\r\n                <tbody data-bind=\"foreach: Item\">\r" +
"\n                    <tr>\r\n                        <td data-bind=\"text: Value\"><" +
"/td>\r\n                        <td data-bind=\"text: Type\"></td>\r\n                " +
"    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n   " +
"     ");



WriteLiteral("\r\n    </script>\r\n\r\n    <script type=\"text/javascript\">\r\n        var m = new viewM" +
"odel();\r\n        ko.applyBindings(m);\r\n    </script>\r\n\r\n</body>\r\n</html>\r\n");


        }
    }
}
#pragma warning restore 1591
