@* Generator: Template TypeVisibility: Internal *@

@using System.Collections.Generic
@using System.Linq
@using Data
@using Data.Deploy
@using Data.Deploy.Models
@inherits Web.RazorPageBase
@functions
{
    public List<EmbeddedSchemaProviderAttribute> EmbeddedSchemaPoviders { get; set; }
    public IEmbeddedSchemaPlanner Planner { get; set; }
    public bool IsSqlPackage(EmbeddedSchemaProviderAttribute attribute)
    {
        return typeof(SqlPackageEmbeddedSchemaProvider).IsAssignableFrom(attribute.Decorates);
    }
    public string SchemaTojson(EmbeddedSchemaProviderAttribute schema, bool renderPlan = true)
    {
        var plans = Planner.GetPlansFor(schema);
        var hasAllSqlPackage = plans.All(IsSqlPackage);

        var model = new SchemaModel(schema);
        model.hasAllSqlPackages = hasAllSqlPackage;
        if (renderPlan)
        {
            model.plans.AddRange(plans.Select(x => new SchemaModel(x)
            {
                hasAllSqlPackages = Planner.GetPlansFor(x).All(IsSqlPackage)
            }));
        }
        else
        {
            model.plans = null;
        }

        var result = new Serialization.JavaScriptSerializer().Serialize(model);
        return result;
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Noodle Data Deploy</title>
    <link rel="stylesheet" href="/noodle/embedded/bootstrapcss" />
    <style type="text/css">
        code.deploy-output, pre.deploy-script {
            color:#333;
            display:block;
        }
        pre.deploy-script
        {
            height:500px;
            overflow-y:auto;
        }
    </style>
    <script type="text/javascript" src="/noodle/embedded/jquery"></script>
    <script type="text/javascript" src="/noodle/embedded/bootstrapjs"></script>
    <script type="text/javascript" src="/noodle/embedded/knockout"></script>
    <script type="text/javascript" src="/noodle/embedded/knockoutmapping"></script>
    <script type="text/javascript">

        $(function () {
            // setup the tabs
            $('#schema-tabs a').first().tab('show');
        });

        function schemaModel(schema) {
            var model = this;
            model.errorMessages = ko.observableArray([]);
            model.successMessages = ko.observableArray([]);
            model.name = schema.name;
            model.displayName = schema.displayName;
            model.hasAllSqlPackages = schema.hasAllSqlPackages;
            model.plans = ko.observableArray([]);
            model.isWorking = ko.observable(false);

            model.hasErrorMessages = ko.computed(function () {
                return this.errorMessages().length > 0;
            }, model);

            model.hasSuccessMessages = ko.computed(function () {
                return this.successMessages().length > 0;
            }, model);

            model.clearState = function () {
                model.errorMessages([]);
                model.successMessages([]);
                $.each(model.plans(), function (index, plan) {
                    plan.deployReport(null);
                    plan.deployOutput(null);
                    plan.deployScript(null);
                    plan.deployScriptDownloadKey(null);
                });
            };

            if (schema.plans && schema.plans.length > 0) {
                model.plans($.map(schema.plans, function (item) {
                    var p = new plan(item);
                    p.parentName = model.name;
                    return p;
                }));
            }

            model.performDeploy = function () {
                model.isWorking(true);
                model.clearState();
                var data = {
                    schemaName: model.name,
                    connectionString: ko.mapping.toJS(m.connectionString)
                };
                $.ajax({
                    type: "POST",
                    url: "/noodle/datadeploy/deploy",
                    data: data,
                    success: function (result) {
                        handleDeployResponse(result, model);
                    }
                });
            };
            model.buildDelpoyReport = function () {
                model.isWorking(true);
                model.clearState();
                var data = {
                    schemaName: model.name,
                    connectionString: ko.mapping.toJS(m.connectionString)
                };
                $.ajax({
                    type: "POST",
                    url: "/noodle/datadeploy/deployReport",
                    data: data,
                    success: function (result) {
                        handleDeployReportResponse(result, model);
                    }
                });
            };
            model.generateScript = function () {
                model.isWorking(true);
                model.clearState();
                var data = {
                    schemaName: model.name,
                    connectionString: ko.mapping.toJS(m.connectionString)
                };
                $.ajax({
                    type: "POST",
                    url: "/noodle/datadeploy/deployScript",
                    data: data,
                    success: function (result) {
                        handleDeployScriptResponse(result, model);
                    }
                });
            };

        }

        function plan(schema) {
            var model = this;
            model.name = schema.name;
            model.displayName = schema.displayName;
            model.deployReport = ko.observable(null);
            model.deployScript = ko.observable(null);
            model.deployOutput = ko.observableArray([]);
            model.deployScriptDownloadKey = ko.observable(null);
            model.hasDeployReport = ko.computed(function () {
                if (this.deployReport()) {
                    return true;
                } else {
                    return false;
                }
            }, model);
            model.hasDeployOutput = ko.computed(function () {
                var o = this.deployOutput();
                if (o) {
                    if (o.length > 0) {
                        return true;
                    }
                }
                return false;
            }, model);
            model.hasDeployScript = ko.computed(function () {
                var o = this.deployScript();
                if (o) {
                    if (o.length > 0) {
                        return true;
                    }
                }
                return false;
            }, model);
        }

        function connectionStringModel() {
            this.server = ko.observable('localhost\\sqlexpress');
            this.database = ko.observable('noodle');
            this.useIntegratedSecurity = ko.observable(true);
            this.userName = ko.observable('');
            this.password = ko.observable('');
        }

        function viewModel() {
            var model = this;
            model.schemas = ko.observableArray([]);
            @foreach (var schema in EmbeddedSchemaPoviders)
            {
                <text>
            model.schemas.push(new schemaModel(@(Html(SchemaTojson(schema))))); 
                </text>   
            }
            model.connectionString = new connectionStringModel();
        }

        function handleCommonResult(result, schema) {
            schema.isWorking(false);
            schema.errorMessages(result.errors);
            if (result.successful) {
                schema.successMessages([result.successMessage]);
            } else {
                schema.successMessages([]);
            }
        }

        function handleDeployResponse(result, schema) {
            handleCommonResult(result, schema);
            var $schema = $("div[data-schema='" + schema.name + "']");

            $.each(result.Output, function (planName, output) {
                var planModel = ko.dataFor($("div[data-plan='" + planName + "'] div", $schema)[0]);
                planModel.deployOutput(output);
            });

            $(".accordion-body", $schema).css({ height: 'auto' });
            $(".collapse", $schema).collapse("show");
        }

        function handleDeployScriptResponse(result, schema) {
            handleCommonResult(result, schema);
            var $schema = $("div[data-schema='" + schema.name + "']");

            $.each(result.Scripts, function (planName, script) {
                var planModel = ko.dataFor($("div[data-plan='" + planName + "'] div", $schema)[0]);
                planModel.deployScript(script.Script);
                planModel.deployScriptDownloadKey(script.Key);
            });

            $(".accordion-body", $schema).css({ height: 'auto' });
            $(".collapse", $schema).collapse("show");
        }

        function handleDeployReportResponse(result, schema) {
            handleCommonResult(result, schema);
            var $schema = $("div[data-schema='" + schema.name + "']");

            $.each(result.DeploymentReports, function (planName, planReport) {
                var planModel = ko.dataFor($("div[data-plan='" + planName + "'] div", $schema)[0]);
                planModel.deployReport(planReport);
            });

            $(".accordion-body", $schema).css({ height: 'auto' });
            $(".collapse", $schema).collapse("show");
        }

    </script>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="span12">
                <div class="page-header">
                    <h1>Data Deploy</h1>
                </div>
                <div class="form-horizontal">
                    <div class="control-group">
                        <label for="server" class="control-label">Server</label>
                        <div class="controls">
                            <input data-bind="value: connectionString.server" type="text" name="server" />
                        </div>
                    </div>
                    <div class="control-group">
                        <label for="database" class="control-label">Database</label>
                        <div class="controls">
                            <input data-bind="value: connectionString.database" type="text" name="database" />
                        </div>
                    </div>
                    <div class="control-group">
                        <label for="useIntegratedSecurity" class="control-label">Integrated Security</label>
                        <div class="controls">
                            <input data-bind="checked: connectionString.useIntegratedSecurity" type="checkbox" name="useIntegratedSecurity" />
                        </div>
                    </div>
                    <div data-bind="visible: connectionString.useIntegratedSecurity() == false">
                        <div class="control-group">
                            <label for="userName" class="control-label">Username</label>
                            <div class="controls">
                                <input data-bind="value: connectionString.userName" type="text" name="userName" />
                            </div>
                        </div>
                        <div class="control-group">
                            <label for="password" class="control-label">Password</label>
                            <div class="controls">
                                <input data-bind="value: connectionString.password" type="text" name="password" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tabbable">
                    <ul data-bind="foreach: schemas" id="schema-tabs" class="nav nav-tabs">
                        <li>
                            <a data-bind="attr: { href: '#' + name + '-tab' }, text: displayName" data-toggle="tab"></a>
                        </li>
                    </ul>
                    <div data-bind="foreach: schemas" class="tab-content">
                        <div data-bind="attr: { id: name + '-tab', 'data-schema': name }" class="tab-pane">


                            <ul data-bind="visible: hasErrorMessages, foreach: errorMessages" class="alert alert-error unstyled">
                                <li><span data-bind="text: $data"></span></li>
                            </ul>

                            <ul data-bind="visible: hasSuccessMessages, foreach: successMessages" class="alert alert-success unstyled">
                                <li><span data-bind="text: $data"></span></li>
                            </ul>

                            <div data-bind="visible: !hasAllSqlPackages" class="alert alert-error">
                                One or more emebedded shemas below are not usinkl "SqlPackage.exe" which is required to perform deployments.
                            </div>
                            <p>
                                <div class="btn-group">
                                    <button data-bind="disable: !hasAllSqlPackages || isWorking, click: performDeploy" type="button" class="btn">Deploy</button>
                                    <button data-bind="disable: !hasAllSqlPackages || isWorking, click: generateScript" type="button" class="btn">Generate</button>
                                    <button data-bind="disable: !hasAllSqlPackages || isWorking, click: buildDelpoyReport" type="button" class="btn">Report</button>
                                </div>
                            </p>
                            <div data-bind="attr : {id: name + '-accordian' }, foreach: plans" class="accordion">
                                <div data-bind="attr: { 'data-plan': name }" class="accordion-group">
                                    <div class="accordion-heading">
                                        <a data-bind="text: displayName, attr: { 'data-parent': parentName + '-accodian', href: '#' + parentName + name + '-content' }" class="accordion-toggle collapsed" data-toggle="collapse"></a>
                                    </div>
                                    <div data-bind="attr: { id: parentName + name + '-content' }" class="accordion-body collapse" style="height: 0px;">
                                        <div data-bind="visible:(hasDeployReport() || hasDeployOutput() || hasDeployScript())" class="accordion-inner">
                                            <div data-bind="if:hasDeployReport">
                                                <div data-bind="template: { name: 'deploy-report-template', data: deployReport }"></div>
                                            </div>
                                            <div data-bind="if:hasDeployOutput">
                                                <div data-bind="template: { name: 'deploy-output-template', data: deployOutput }"></div>
                                            </div>
                                            <div data-bind="if:hasDeployScript">
                                                <div data-bind="template: { name: 'deploy-script-template', data: deployScript }"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/html" id="deploy-script-template">
        <a data-bind="if: ($parent.deployScriptDownloadKey()), attr: {href: ( '/noodle/datadeploy/deployscriptdownload/' + $parent.deployScriptDownloadKey())}" class="btn" target="_blank">Download script</a>
        <pre data-bind="text: $data" class="deploy-script">

        </pre>
    </script>

    <script type="text/html" id="deploy-output-template">
        <code data-bind="foreach: $data" class="deploy-output">
            <span data-bind="text: $data"></span>
            <br />
        </code>
    </script>

    <script type="text/html" id="deploy-report-template">

        <div data-bind="if: (HasInfomation == false)">
            <p class="alert alert-success">There are no schema/object changes.</p>
            <i>There may be pre/post deploy scripts.</i>
        </div>

        <ul data-bind="visible: HasErrors, foreach: Errors" class="alert alert-error unstyled">
            <li><span data-bind="text: Issue"></span>: <span data-bind="text: Name"></span></li>
        </ul>

        <ul data-bind="visible: HasWarnings, foreach: Warnings" class="alert alert-info unstyled">
            <li><span data-bind="text: Issue"></span>: <span data-bind="text: Name"></span></li>
        </ul>

        <ul data-bind="visible: HasAlerts, foreach: Alerts" class="alert unstyled">
            <li><strong data-bind="text: Name"></strong>:
                <div data-bind="foreach: Issue">
                    <span data-bind="text: Value"></span>
                </div>
            </li>
        </ul>

        <div data-bind="foreach: Operations">
            <legend data-bind="text: Name"></legend>
            <table class="table table-striped">
                <tbody data-bind="foreach: Item">
                    <tr>
                        <td data-bind="text: Value"></td>
                        <td data-bind="text: Type"></td>
                    </tr>
                </tbody>
            </table>
        </div>

        @*<pre data-bind="text: ko.toJSON($data, null, 2)"></pre>*@
    </script>

    <script type="text/javascript">
        var m = new viewModel();
        ko.applyBindings(m);
    </script>

</body>
</html>
